When a user enters an URL in the browser, how does the browser fetch the desired result?

To answer this first understand what is browser?

"Browser is a computer program with a graphical user interface for displaying and navigating between web pages"

A browser is a software program that is used to explore, retrieve, and display the information available on the World Wide Web. This information may be in the form of pictures, web pages, videos, and other files that all are connected via hyperlinks and categorized with the help of URLs (Uniform Resource Identifiers).

The next thing to know is how does a web browser work?

A web browser takes you anywhere on the internet. It retrieves information from other parts of the web and displays it on your desktop or mobile device. The information is transferred using the Hypertext Transfer Protocol, which defines how text, images and video are transmitted on the web.

So, when a user enters an URL in the browser it parse the URL and make a request to the server according to the entered URL. The server respond to the request accordingly and return the repsonse to the browser.

As we know a web browser’s primary function is to render HTML, the code that is used to design or “mark up” web pages. When a browser loads a web page, it processes the HTML, which may contain text, links, and references to images and other items like CSS and JavaScript functions. The browser then renders these objects in the browser window after processing them.

If this is an URL of a web-page then server return web-page in the response. Now, browser have the ability to undersatnd the web-page, parse the web-page and render the webpage on the client screen.
So, browser dispaly the webpage in the browser tab.

What is the main functionality of the browser?

Web browser function starts with a user entering the desired URL(Uniform Resource Locator) into the address bar of the browser. For example https://www.googledotcom. Depending on the URL prefix, the web browser interprets the URL and displays the content to the user. The URL prefix provides the protocol used to access the location. HTTP:// and HTTPS:// are the most commonly used URL prefixes.

Other commonly used prefixes include ftp: for File Transfer Protocol to download file or files from an FTP server, file: for files stored in a storage device locally, and mailto: which redirects to the user’s email application such as Gmail. mailto:someone@gmail.com is an example of a mailto:.

Once the resource has been located and interpreted the browser will display the content to the user. The browser application converts content such as HTML, CSS, and images to an interactive file in a process called rendering. Browsers can interpret and display content such as video, images, text, hyperlinks, and XML files.

Below are the main functionality of web browsers

(i) The main task is to collect information from the Internet and make it accessible to users.
(ii) A web browser can be used to visit any website. When we type a URL into a browser, the web server redirects us to that website.
(iii) Plugins are available on the web browser to run Java applets and flash content.
(iv) It simplifies Internet surfing because once we arrive at a website, we can quickly check the hyperlinks and access a wealth of information.
(v) Internal cache is used by browsers and is saved so that the user can open the same webpage multiple times without losing any data.
(vi) A web browser can open multiple web pages at the same time.
(vii) Back, forward, reload, stop reload, home, and other options are available on these web browsers, making them simple and convenient to use.

High Level Components of a browser

The browser's main components are:

(i) The user interface: this includes the address bar, back/forward button, bookmarking menu, etc. Every part of the browser display except the window where you see the requested page.
(ii) The browser engine: marshals actions between the UI and the rendering engine.
(iii) The rendering engine: responsible for displaying requested content. For example if the requested content is HTML, the rendering engine parses HTML and CSS, and displays the parsed content on the screen.
(iv) Networking: for network calls such as HTTP requests, using different implementations for different platform behind a platform-independent interface.
(v) UI backend: used for drawing basic widgets like combo boxes and windows. This backend exposes a generic interface that is not platform specific. Underneath it uses operating system user interface methods.
(vi) JavaScript interpreter. Used to parse and execute JavaScript code.
(vii) Data storage. This is a persistence layer. The browser may need to save all sorts of data locally, such as cookies. Browsers also support storage mechanisms such as localStorage, IndexedDB, WebSQL and FileSystem.

Rendering engine and its use

Different browsers use different rendering engines: Internet Explorer uses Trident, Firefox uses Gecko, Safari uses WebKit. Chrome and Opera (from version 15) use Blink, a fork of WebKit.

WebKit is an open source rendering engine which started as an engine for the Linux platform and was modified by Apple to support Mac and Windows.


